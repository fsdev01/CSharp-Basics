@using Microsoft.AspNetCore.Components.Web
@using ContosoCrafts.Models
@using ContosoCrafts.WebSite.Services
@inject JsonFileProductService ProductService

<div class="card-columns">
    @foreach (var product in ProductService.GetProducts())
    {
    <div class="card">
        <div class="card-img" style="background-image: url('@product.Image');"></div>
        <div class="card-body">
            <h5 class="card-title"> @product.Title </h5>
        </div>
        <div class="card-footer">
            <small class="text-muted">
                <button @onclick="(e => SelectProduct(product.Id))"
                        data-toggle="modal"
                        data-target="#productModal"
                        class="btn btn-primary">
                    More Info
                </button>
            </small>
        </div>
    </div>




    }
</div>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }

                    <!--display the stars (accumulative)-->
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            // highlight (checked) star i
                            <span class="fa fa-star checked" @onclick="(e=> SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            // don't highligh star (not checked)
                            <span class="fa fa-star" @onclick="(e=> SubmitRating(currentStar))"></span>
                        }
                    }

                </div>
            </div>
        </div>
    </div>
}

@code {
    Product selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
        // Data Binding
        // product id
        selectedProductId = productId;
        // reference to product object
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);


        GetCurrentRating(); // Get current rating when user select the product
    }

    int currentRating = 0; // initalise rating to 0 (rounded integer)
    int voteCount = 0; // count # of votes
    string voteLabel; // display vote string (e.g. 1 vote or 2 votes)

    // Get current rating (average) from JSON file
    void GetCurrentRating()
    {
        // If rating is currently null
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        // If rating has an array
        else
        {
            // Count number of votes in the array
            voteCount = selectedProduct.Ratings.Count();

            // Generate label/string for # of votes
            // 1 vote (singular) or 2,3,4,5... votes plural
            voteLabel = voteCount > 1 ? "Votes" : "Vote";

            // current rating
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    // Update the current rating in the JSON file
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id} : {rating}");
        // Use Product Service to update the rating in JSON file (don't need to serialize manually)
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }



}
